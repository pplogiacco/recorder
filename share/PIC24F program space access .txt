PIC24F Program Space 
32K words addressed by 23-bit effective address plus a byte select bit :

+------------------------+----------------------------------+----+
 | TBLPAG 8bit         |  W register 15bit                | HL |
+------------------------+----------------------------------+----+

TBLPAG 8bit page address

A 24-bit program memory address is formed using the TBLPAG<7:0> bits and the Effective Address (EA) from a W register, specified in the table instruction.

The TBLRDL and TBLWTL instructions are used to access the lower 16 bits of program memory data. 
The LSb of the W register address is ignored for word-wide table accesses.
For byte-wide accesses, the LSb of the W register address determines which byte is read. 

The TBLRDH and TBLWTH instructions are used to access the upper 8 bits of the program memory data. 
These instructions also support Word or Byte Access modes for orthogonality.
The high byte of the program memory data will always return ‘0’ ( Phantom byte )
Is recommended that the upper byte of program data be programmed either as a NOP (0x00 or 0xFF), or as an illegal
opcode (0x3F) value, to protect the device from accidental execution of stored data.

Any read of the phantom byte will return 0x00 and a write to the phantom byte has no effect.


READ WORD MODE
int addrOffset;
int VarWord;
int VarWord1;
{
:
:
TBLPAG = ((PROG_ADDR & 0x7F0000)>>16);
addrOffset = (PROG_ADDR & 0x00FFFF);
asm("tblrdh.w [%1], %0" : "=r"(VarWord1) : "r"(addrOffset));
asm("tblrdl.w [%1], %0" : "=r"(VarWord) : "r"(addrOffset));
:
:
}



READ BYTE MODE
int addrOffset;
char VarByte1;
char VarByte2;
char VarByte3;
{
:
:
TBLPAG = ((PROG_ADDR & 0x7F0000)>>16);
addr = (PROG_ADDR & 0x00FFFF);
asm("tblrdl.b [%1], %0" : "=r"(LocalVarByte1) : "r"(addrOffset)) ; // Read low byte
asm("tblrdl.b [%1], %0" : "=r"(LocalVarByte2) : "r"(addrOffset +1)) ;//Read middle byte
asm("tblrdh.b [%1], %0" : "=r"(LocalVarByte3) : "r"(addrOffset)) ; // Read high byte
:
:
}



The tblpage() and tbloffset() directives are provided by the Microchip assembler for the PIC24F. 

These directives select the appropriate TBLPAG and W register values for the table instruction from a program memory address value.
Refer to “MPLAB® ASM 30, MPLAB® LINK30 and Utilities User’s Guide” (DS51317).


WRITING A SINGLE PROGRAM MEMORY LATCH IN WORD/BYTE MODE

Write Word Mode
int VarWord1 = 0xXXXX;
int VarWord2 = 0xXXXX;
int addrOffset;
{
:
:
TBLPAG = ((PROG_ADDR & 0x7F0000)>>16);
addrOffset = (PROG_ADDR & 0x00FFFF);
asm("tblwtl %1, [%0]" : "=r"(addrOffset) : "d"(VarWord)) ;
asm("tblwth %1, [%0]" : "=r"(addrOffset) : "d"(VarWord1)) ;
:
:
}


Run-Time Self-Programming (RTSP)
RTSP allows the user code to modify Flash program memory contents. RTSP is accomplished
using TBLRD (table read) and TBLWT (table write) instructions, and the NVM Control registers.
With RTSP, the user can erase program memory, 8 rows (64x8 = 512 instructions) at a time, and
can write program memory data, single rows (64 instructions) at a time

The basic sequence for RTSP programming is to set up a Table Pointer, then do a series of
TBLWT instructions to load the buffers. Programming is performed by setting the control bits in
the NVMCON register. A total of 64 TBLWTL and TBLWTH instructions are required to load the
instructions.
All of the table write operations are single-word writes (2 instruction cycles), because only the
buffers are written. A programming cycle is required for programming each row.
A complete programming sequence is necessary for programming or erasing the internal Flash
in RTSP mode. A programming operation is nominally 4 ms(1) in duration and the processor stalls
(waits) until the operation is finished. Setting the WR bit (NVMCON<15>) starts the operation and
the WR bit is automatically cleared when the operation is finished.


Control Registers
There are two SFRs used to read and write the program Flash memory: NVMCON and NVMKEY.
The NVMCON register (Register 4-1) controls which blocks are to be erased, which memory type
is to be programmed and the start of the programming cycle.
NVMKEY is a write-only register that is used for write protection. To start a program or erase
sequence, the user must consecutively write 55h and AAh to the NVMKEY register.



The user can program one row of program Flash memory at a time. To do this, it is necessary to
erase the 8-row erase block containing the desired row. The general process is:
1. Read eight rows of program memory (512 instructions) and store in data RAM.
2. Update the program data in RAM with the desired new data.
3. Erase the block:
a) Set the NVMOP bits (NVMCOM<3:0>) to ‘0010’ to configure for block erase. Set the
ERASE (NVMCOM<6>) and WREN (NVMCOM<14>) bits.
b) Write the starting address of the block to be erased into the TBLPAG and W registers.
c) Write 55h to NVMKEY.
d) Write AAh to NVMKEY.
e) Set the WR bit (NVMCOM<15>). The erase cycle begins and the CPU stalls for the
duration of the erase cycle. When the erase is done, theWR bit is cleared automatically.
4. Write the first 64 instructions from data RAM into the program memory buffers (see Section 4.5
“Program Memory Writes”).
5. Write the program block to Flash memory:
a) Set the NVMOP bits to ‘0001’ to configure for row programming. Clear the ERASE
bit and set the WREN bit.
b) Write 55h to NVMKEY.
c) Write AAh to NVMKEY.
d) Set the WR bit. The programming cycle begins and the CPU stalls for the duration of the
write cycle. When the write to Flash memory is done, the WR bit is cleared automatically.
6. Repeat steps 4 and 5, using the next available 64 instructions from the block in data RAM
by incrementing the value in TBLPAG, until all 512 instructions are written back to Flash
memory.



PROGRAM SPACE VISIBILITY FROM DATA SPACE
The upper 32 Kbytes of the PIC24F data memory address space may optionally be mapped into any 16K word program space page. 
This mode of operation is called Program Space Visibility (PSV) and provides transparent access of stored constant data from data space without the need
to use special instructions (i.e., TBLRD, TBLWT).

Program Space Visibility is enabled by setting the PSV bit (CORCON<2>).

Upper 8 bits of Program Memory Data cannot be Read using PSV !

The 15 LSbs of the PSV address are provided by the W register that contains the effective address. 
The MSb of the W register is not used to form the address. 
Instead, the MSb specifies whether to perform a PSV access from program space or a normal access from data memory space. 
If a W register effective address of 0x8000 or greater is used, the data access will occur from program memory space when PSV is enabled. 
All accesses will occur from data memory when the W register effective address is less than 0x8000.

The remaining address bits are provided by the PSVPAG register (PSVPAG<7:0>)

The PSVPAG bits are concatenated with the 15 LSbs of the W register, holding the
effective address to form a 23-bit program memory address.

The LSb of the W register value is used as a byte select bit, which allows instructions using PSV
to operate in Byte or Word mode.



-------- FROM MEASUREMENT 

//#define EADDR_CURRENT_PAGE      120 // Measurement storing system Page
//#define EADDR_CURRENT_ADDRESS   121 // first available address in Page

//#define EEA_ADDR_H              126
//#define EEA_ADDR_L              127
//#define EEA_PAGE_OFFSET         128

//#define EADDR_TOWRITE_PAGE      122     
//#define EADDR_TOWRITE_ADDRESS   123 // first available address in Page

// NVM (MCU-PS)
#define NVM_SPACE_ADDRESS       0x4000  // Aligned
#define NVM_SPACE_SIZE_BYTE     32    // 32k  16bit MCU
#define NVM_PAGE_SIZE_BYTE      3096U
#define NVM_MAX_PAGES           6U    // 32k / PAGE_SIZE_BYTE
#define NVM_AU_BYTES            3U    

// ESF (SPI-SST26)
#define ESF_SPACE_ADDRESS       0x4000
#define ESF_SPACE_SIZE_BYTE     32    // 32k  16bit MCU
#define ESF_PAGE_SIZE_BYTE      3096U
#define ESF_MAX_PAGES           6U    // 32k / PAGE_SIZE_BYTE
#define ESF_AU_BYTES            3U    
//#define ESF_SPI_ACCESS          3U    

typedef enum {
    NVM = 0x00,
    ESF
} media_t;

typedef struct {
    media_t MEDIA;
    uint16_t ADDRESS;
    uint16_t SIZE;
    uint8_t EA_PAGE;
    uint8_t EA_ADDRESS;
    uint16_t free;
} memarray_t;
#include "../memory/DEE/flash.h"

/* -------------------------------------------------------------------------- */

// maximum of 32K total space allocable in PSV
//  59033 words (0x4000 - to 0x12699)
// 65535 (0xFFFF) / 2048 = 31

//   128 Pages * ( 1024*4 ) Bytes = 524288 (0x80000) bytes of flash
// uint8_t nvmPages[128] __attribute__((space(prog), address(NVM_SPACE_ADDRESS), aligned(NUMBER_OF_INSTRUCTIONS_IN_PAGE * 4), noload));

////uint16_t nvmBlockWrite(uint8_t* dPtr, uint16_t nBytes) { // return written bytes
////
////    uint32_t currentPage;
////    uint16_t currentAddress;
////    // Read from EEprom currentPage, currentAddress (dee routines)
////    DEE_Read(EEA_ADDR_H, (uint16_t*) & currentPage); // (dee.h)  
////    DEE_Read(EEA_ADDR_L, (uint16_t*) (&currentPage + 2)); // (dee.h)  
////    //DEE_Read(EEA_PAGE_OFFSET, &currentAddress); // (dee.h)  
////    
////    
////        ////////    uint32_t towrite[2U];
////    ////////    nvm_address = FLASH_GetErasePageAddress((uint32_t) & nvmConfigDatas);
////    ////////    FLASH_Unlock(FLASH_UNLOCK_KEY);
////    ////////
////    ////////    result = FLASH_ErasePage(nvm_address);
////    
////    
////    //    DEE_Read(EADDR_CURRENT_PAGE, &currentPage); // (dee.h)  
////    //    DEE_Read(EADDR_CURRENT_ADDRESS, &currentAddress);
////
////    uint32_t pageAddress = currentPage * NVM_PAGE_SIZE_BYTE;
////    uint32_t availableSpace = NVM_PAGE_SIZE_BYTE - (currentAddress - pageAddress);
////    uint16_t iPtr = 0;
////
////    bool result = true;
////    uint32_t nvm_address; // 24 bit address
////    uint16_t iR, iF;
////    uint32_t towrite[2U];
////
////    FLASH_Unlock(FLASH_UNLOCK_KEY);
////    iR = 0; // Bytes
////    iF = iR; // Words
////
////    while (nBytes > 0) {
////        if (availableSpace == 0) { // Page outbound
////
////            // initialize next NVM Page (flash.h)
////            // nvm_address = FLASH_GetErasePageAddress((uint32_t) & measurement);
////            // result = FLASH_ErasePage(nvm_address);
////
////            currentPage++;
////            currentAddress = 0;
////        }
////
////        //        while (iR < ramConfigSize) { //  Sizeof(config_t)
////        towrite[0] = *(dPtr + iR + 2);
////        towrite[0] <<= 8;
////        towrite[0] |= *(dPtr + iR + 1);
////        towrite[0] <<= 8;
////        towrite[0] |= *(dPtr + iR);
////        towrite[1] = *(dPtr + iR + 5);
////        towrite[1] <<= 8;
////        towrite[1] |= *(dPtr + iR + 4);
////        towrite[1] <<= 8;
////        towrite[1] |= *(dPtr + iR + 3);
////        iR += 6;
////
////        //            printf("%u %u \n", (uint16_t) (w0>>16)& 0xFFFF, (uint16_t)w0 & 0xFFFF);
////        //            printf("%u %u \n", (uint16_t) (w1>>16)& 0xFFFF , (uint16_t)w1 & 0xFFFF);         
////        result &= FLASH_WriteDoubleWord24(nvm_address + iF, towrite[0], towrite[1]);
////        iF += 4U;
////        //        }
////
////    }
////
////    //    write_nvm24(pageAddress, currentAddress, dPtr[iPtr]); // (flash.h)
////
////    //    currentAddress += _nvm24; // 
////    //    iPtr += nvm24_du;
////    //    nBytes -= nvm24_du;
////
////
////    FLASH_Lock();
////    //  Write to EEprom currentPage, currentAddress
////
//////    DEE_Write(EADDR_CURRENT_PAGE, currentPage); // (dee.h)  
//////    DEE_Write(EADDR_CURRENT_ADDRESS, currentAddress);
////
////    return (iPtr);
////}
